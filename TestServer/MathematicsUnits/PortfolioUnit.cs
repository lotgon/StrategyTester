using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mathematics;
using Mathematics.LinearAlgebra;

namespace MathematicsUnits
{
	[TestClass]
	public class PortfolioUnit
	{
		private static double[,] m_equity;
		private static double[,] m_margin;

		private static double[,] m_equity2;
		private static double[,] m_margin2;
		private static Vector[] m_balance2;


		[ClassInitialize]
		public static void Initialize(TestContext context)
		{
			m_equity = new double[,]
			{
				{10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 9999250, 9999450, 9994150, 9995250, 
				9994550, 9994450, 9997050, 9996700, 9995600, 9994600, 9994050, 9994400, 9992150, 9988450, 9991900, 9993300, 9990700, 9992200, 
				9992050, 9988400, 9989850, 9990500, 9990800, 9993450, 9990300, 9983950, 9987350, 9987750, 9987750, 9987800, 9987800, 9987750, 
				9987200, 9987700, 9987750, 9987850, 9987750, 9987750, 9987750, 9987800, 9987800, 9987850, 9987800, 9987800, 9987600, 9987850, 
				9987800, 9987800, 9987850, 9987800, 9987850, 9987750, 9987750, 9987750, 9985310, 9967410, 9957810, 9956910, 9958310, 9936310, 
				9946410, 9940810, 9945110, 9949810, 9953910, 9950710, 9935310, 9973570, 9973570, 9973770, 9973170, 9972570, 9974070, 9976170, 
				9985670, 9997070, 9988570, 9979070, 9980170, 9976170, 9974470, 9975570, 9976370, 9978570, 9974370, 9973670, 9978670, 9978570, 
				9979770, 9974470, 9975970, 9977170, 9973270, 9975870, 9973770, 9973570, 9974170, 9918170, 9929570, 9954020, 9937970, 9905570, 
				9900770, 9894170, 9894770, 9893270, 9898820, 9893270, 9973370, 10010130, 10018730, 10009430, 9991830, 9983630, 9943330, 9983530, 
				9975130, 9975430, 9963430, 9950680, 9952330, 9926980, 9881380, 9874480, 9867130, 9841830, 9830830, 9870030, 9894230, 9910230, 
				9906630, 9915290, 9902540, 9842540, 9831140, 9824740, 9808140, 9775390, 9781640, 9775140, 9734640, 9734390, 9658890, 9564040, 
				9562240, 9603790, 9644040, 9647190, 9636340, 9669440, 9593890, 9637190, 9668290, 9643440, 9669440, 9706240, 9710610, 9742060, 
				9779770, 9762870, 9798170, 9773220, 9727070, 9742670, 9777620, 9776870, 9780820, 9812630, 9813530, 9813240, 9810840, 9819140, 
				9832140, 9844540, 9853750, 9853950, 9849350, 9853950, 9853750, 9854350, 9855660, 9829560, 9814760, 9818860, 9806530, 9867630, 
				9824180, 9748480, 9703480, 9703780, 9714630, 9636930, 9660640, 9629440, 9715440, 9713840, 9608640, 9519040, 9627040, 9611040, 
				9702240, 9709040, 9573440, 9488240, 9519840, 9520290, 9581090, 9610890, 9586390, 9573140, 9634890, 9783950, 9720850, 9726350, 
				9690550, 9757950, 9748250, 9688350, 9765400, 9765350, 9754550, 9761100, 9790350, 9828950, 9844900, 9854800, 9766250, 9830600, 
				9842900, 9892830, 9889590, 9897540, 9889940, 9891300, 9907950, 9913950, 9911850, 9907050, 9913350, 9886650, 9926400, 9937410, 
				9947860, 9955870, 9946650, 9954510, 9955480, 9963660, 9958800, 9963410, 9970420, 9975490, 9976580, 10014020, 9996790, 10002230, 
				9991600, 9984550, 10003420, 9982470, 10035030, 10024720, 10011960, 10041300, 10034260, 10069610, 10065970, 10074270, 10053500, 
				10044600, 10037920, 10055410},
				{10000000, 10000000, 10000000, 10000000, 10003650, 10001000, 10001150, 10012000, 10005950, 10009700, 10001250, 10009700, 
				10015950, 10017960, 10017960, 10023160, 10025460, 10035920, 10035920, 10035920, 10033970, 10017220, 10015770, 10021420, 
				10021470, 10021420, 10021420, 10021270, 10018880, 9998780, 10001280, 10010580, 10021180, 10005780, 9974480, 9964280, 9954080, 
				9957680, 10000440, 9993740, 9984790, 9966640, 9967240, 9960340, 9935890, 9941290, 9939490, 9967690, 9970240, 9946840, 9964390, 
				9988690, 9952990, 9965890, 9969640, 9964240, 9960340, 9971590, 9983890, 10006990, 10010590, 9980740, 10008790, 9999640, 9961990, 
				9934240, 9932440, 9948790, 9919090, 9877790, 9868590, 9909790, 9923990, 9943500, 9926850, 9953050, 9965250, 9947850, 9946500, 
				9941150, 9924050, 9913110, 9931510, 9979910, 10029820, 10008520, 10016920, 10029520, 10002220, 9982870, 9975370, 9978370, 9968120, 
				9961370, 9906030, 9970030, 9961830, 9974630, 9888630, 9895630, 9917030, 9933830, 9941830, 9895230, 9804130, 9723630, 9638780, 
				9696680, 9768090, 9702090, 9647640, 9651540, 9583140, 9477040, 9477740, 9494540, 9327940, 9496290, 9605900, 9621600, 9592000, 
				9499860, 9495310, 9390660, 9519810, 9452610, 9464860, 9452260, 9431560, 9435160, 9391010, 9249470, 9220270, 9214270, 9243070, 
				9267870, 9381070, 9364670, 9439870, 9446530, 9519680, 9507780, 9563780, 9569380, 9589330, 9523530, 9484680, 9513030, 9533680, 
				9555380, 9568680, 9499380, 9427980, 9458430, 9656880, 9692740, 9681640, 9658540, 9727240, 9728740, 9767440, 9737440, 9736840, 
				9715540, 9785740, 9794440, 9900600, 9905600, 9885600, 9910850, 9893850, 9821100, 9892700, 9890950, 9897050, 9920850, 9923250, 
				9927650, 9954700, 9951900, 9956500, 10018820, 10028420, 10015220, 10020320, 10040020, 10041120, 10027420, 10018820, 9939540, 9936890,
				9901040, 9902540, 9929690, 9946740, 9923640, 9933840, 9924320, 9917120, 9876320, 9879320, 9900920, 9920420, 9954920, 9949220, 
				9896120, 9901820, 9974420, 9986420, 10032780, 10028780, 9994030, 9931280, 9952280, 9922580, 9923180, 9971780, 10034490, 10100490, 
				10108240, 10135990, 10126490, 10124490, 10133990, 10235550, 10279550, 10239950, 10316950, 10313950, 10294150, 10345410, 
				10361160, 10362960, 10410660, 10406460, 10368210, 10428020, 10440420, 10442220, 10445020, 10456420, 10430320, 10441320, 
				10453820, 10462220, 10470530, 10465730, 10468030, 10415130, 10455630, 10449230, 10453430, 10454130, 10445460, 10430270, 
				10419920, 10438220, 10437240, 10441240, 10434730, 10447100, 10462520, 10431960, 10485590, 10477910, 10515570, 10515690, 
				10518100, 10527960, 10547400, 10548240, 10513560, 10489890, 10507410, 10538700, 10543170, 10564050, 10521540, 10457340, 
				10454760, 10447480},
				{10000000, 10000000, 9997800, 9999100, 10013110, 10009260, 10005510, 9999410, 9997810, 9990210, 9992510, 9988110, 9986310, 9992210, 
				9997610, 9989310, 9981960, 9986710, 9986510, 9986460, 9986610, 9986510, 9986610, 9986260, 9986610, 9989960, 9984570, 9981070, 
				9976470, 9967870, 9972170, 9984570, 9993970, 9985070, 9964470, 9964370, 9965670, 9959170, 9973870, 9984270, 10007830, 10005380, 
				10007280, 10007180, 10007130, 10008680, 10016100, 10034300, 10035900, 10036860, 10036860, 10036860, 10036810, 10036310, 
				10036960, 10036810, 10036710, 10039760, 10046910, 10056190, 10053090, 10057890, 10046690, 10040690, 10046990, 10053690, 
				10053490, 10053690, 10052590, 10067090, 10066790, 10074750, 10074600, 10071750, 10064150, 10056850, 10048050, 10049950, 
				10046250, 10033050, 10032550, 10039950, 10030850, 10033550, 10035850, 10035050, 10031750, 10025350, 10033350, 10054350, 
				10059350, 10058550, 10025650, 10027350, 10034450, 10026850, 10028550, 10029650, 10058950, 10050550, 10037950, 10064250, 
				10061050, 10052350, 10077150, 10089160, 10125530, 10120130, 10114180, 10101680, 10097880, 10093080, 10099580, 10122440, 
				10122440, 10120240, 10116940, 10116940, 10102850, 10122450, 10116350, 10114350, 10105050, 10104050, 10136260, 10136010, 
				10136210, 10136260, 10136260, 10136310, 10136260, 10136010, 10134320, 10149880, 10148830, 10137980, 10111780, 10116430, 
				10111130, 10114730, 10107530, 10111130, 10111530, 10124980, 10120980, 10143780, 10164780, 10200590, 10209290, 10184540, 
				10187540, 10186940, 10244390, 10268920, 10268920, 10273420, 10275270, 10277070, 10264070, 10259220, 10254620, 10244720, 
				10243520, 10246320, 10250670, 10250770, 10230220, 10153820, 10154170, 10167770, 10214620, 10196870, 10239620, 10241270, 
				10237620, 10256670, 10242970, 10230770, 10241820, 10283370, 10288020, 10310850, 10312650, 10301750, 10300050, 10319850, 
				10322250, 10321050, 10331660, 10336110, 10336060, 10335810, 10336060, 10336060, 10336110, 10336060, 10360330, 10368130, 
				10370180, 10374730, 10380780, 10380180, 10378880, 10371580, 10370080, 10380780, 10385530, 10372130, 10374630, 10359430, 
				10359630, 10358630, 10368480, 10357980, 10354580, 10355780, 10355780, 10355780, 10358440, 10357440, 10359640, 10371340, 
				10373940, 10366540, 10353640, 10370600, 10375750, 10382820, 10383820, 10396120, 10405630, 10420690, 10415990, 10393990, 
				10393890, 10401890, 10386190, 10377590, 10390390, 10375790, 10373590, 10382490, 10374390, 10360190, 10363940, 10367690, 
				10371740, 10375290, 10395400, 10410920, 10414820, 10412670, 10413640, 10408170, 10412010, 10415150, 10400680, 10400020, 
				10398800, 10387840, 10380080, 10379700, 10367830, 10358610, 10362160, 10371040, 10372140, 10365640, 10368160, 10367920, 
				10368040, 10368190, 10368250, 10368310, 10368310, 10368100, 10367650, 10368280, 10368160, 10368310, 10368040}
			};

			m_margin = new double[,]
			{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
				100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
				100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 
				200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 300, 300, 
				300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 200, 200, 200, 200, 200, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 
				400, 400, 400, 400, 400, 400, 300, 400, 400, 400, 400, 400, 500, 500, 500, 500, 500, 500, 600, 600, 600, 600, 600, 600, 700, 800, 
				800, 800, 800, 800, 800, 600, 600, 500, 500, 500, 500, 500, 500, 500, 500, 500, 400, 400, 500, 500, 500, 500, 500, 400, 400, 400, 
				400, 400, 400, 400, 500, 500, 500, 600, 600, 600, 700, 700, 700, 700, 700, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 
				800, 800, 800, 800, 800, 800, 800, 800, 700, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 900, 900, 900, 
				600, 500, 500, 500, 600, 600, 600, 600, 600, 600, 600, 600, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 
				500, 500, 500, 600, 700, 700, 700, 700, 700, 700, 500, 500, 500, 500, 500, 600, 600},
				{0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 0, 100, 100, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 
				200, 200, 200, 200, 200, 300, 300, 300, 200, 200, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 
				300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 400, 400, 400, 400, 300, 300, 300, 300, 300, 300, 300, 300, 400, 
				400, 400, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 500, 500, 600, 600, 
				500, 500, 600, 600, 600, 700, 700, 700, 700, 700, 600, 600, 600, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 800, 800, 800, 
				800, 800, 800, 800, 800, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 700, 600, 600, 600, 600, 600, 
				600, 600, 600, 600, 600, 600, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 600, 600, 400, 400, 400, 400, 400, 
				400, 400, 400, 500, 500, 500, 500, 500, 500, 500, 500, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 500, 500, 500, 
				600, 600, 600, 600, 600, 500, 500, 500, 500, 500, 500, 500, 400, 400, 400, 400, 400, 400, 300, 300, 300, 300, 300, 300, 200, 200, 
				200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 300, 300, 300, 300, 300, 300, 300, 300, 400, 400, 400, 
				400, 200, 200, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 400, 400},
				{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 
				200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 100, 100, 100, 100, 100, 200, 200, 200, 200, 100, 100, 100, 100, 
				100, 100, 100, 100, 200, 300, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 100, 100, 200, 200, 200, 200, 200, 200, 
				200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 
				100, 100, 100, 100, 100, 200, 200, 200, 100, 100, 100, 100, 100, 200, 200, 200, 200, 200, 200, 100, 100, 100, 100, 100, 100, 100, 
				100, 200, 100, 300, 300, 300, 300, 300, 300, 300, 300, 400, 500, 400, 400, 400, 300, 300, 300, 300, 300, 300, 0, 0, 100, 100, 100, 
				100, 100, 100, 100, 100, 100, 200, 400, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 600, 700, 800, 800, 800, 200, 200, 200, 
				200, 200, 200, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
				100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 200, 200, 200, 200, 100, 100, 200, 200, 200, 100, 200, 200, 200, 200, 200, 
				200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 300, 200, 200, 200, 200, 200, 200, 200, 300, 300, 300, 300, 300, 300, 
				300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300}
				};

			m_equity2 = new double[6, 142]
			{
				{10000000, 10008620, 9964940, 9941920, 9796220, 9954870, 9938310, 9965400, 9760520, 9782840, 9848500, 9896500, 9917600, 9801220, 9513920, 9249810, 8940740, 9179740, 9408920, 9203810, 9007680, 9023300, 8758890, 8325440, 8325710, 8410540, 7752850, 8460820, 8903070, 8992020, 8856660, 8425830, 8411360, 8011820, 8565350, 8299300, 8350740, 8314780, 8252530, 8246830, 8058380, 7390530, 7285470, 7246370, 7369220, 7482250, 7967920, 7886320, 8177840, 8219690, 8532830, 8485270, 8717750, 8747150, 8818720, 8566050, 8405790, 8533530, 8626110, 8725710, 8779190, 8499230, 8209490, 8336240, 9142890, 9286090, 9251530, 9146170, 9428300, 9433130, 9578450, 9469550, 9469770, 9395500, 9670620, 9704280, 10068000, 10090800, 10031870, 10117890, 10073020, 9804670, 10106900, 10107200, 10125380, 10242440, 10248200, 10265960, 10376060, 10349810, 10362710, 10527990, 10587410, 10510730, 10538450, 10659650, 10666750, 10596200, 10538570, 10106300, 10083640, 9923990, 9930830, 10048370, 10155950, 10042730, 10050820, 9857920, 9840280, 9695800, 9711520, 9793140, 9868500, 9989250, 9975810, 9783870, 9813140, 10076130, 10117170, 10269170, 10247510, 10129690, 9884050, 9957760, 9860320, 9858220, 10025380, 10236320, 10476830, 10498590, 10591630, 10566430, 10560270, 10588410, 10875120, 10986850, 10908590, 11073240, 11067710, 11033830, 11129780, 11156570},
				{10000000, 10034280, 9861280, 9986170, 10104850, 10054150, 10028280, 10145100, 10185760, 10115030, 10272940, 10224640, 10198360, 10127680, 10052220, 10056560, 9973510, 10042160, 10059100, 9959150, 9877160, 9739180, 9706850, 9799300, 9820720, 9693850, 9757930, 9612670, 9560610, 9616660, 9648200, 9896670, 9966480, 10125820, 9948280, 10141130, 10155120, 10066870, 10143550, 9943070, 9927940, 9982340, 9944260, 9701100, 9726940, 9738530, 9979150, 9868650, 9817470, 9760260, 9974760, 9830390, 9908560, 9993560, 9984380, 9834820, 9821400, 9509110, 9831060, 9821760, 9804550, 9734050, 9631660, 9679120, 9682480, 10083330, 10067350, 10118910, 10356300, 10287140, 10297080, 10455280, 10447600, 10407520, 10544280, 10562540, 10735160, 10745010, 10749870, 10776930, 10797830, 10756140, 10730340, 10732860, 10734330, 10767850, 10771760, 10796360, 10802380, 10739610, 10787690, 10762910, 10831780, 10778080, 10737900, 10704850, 10738450, 10690550, 10713150, 10821950, 10834620, 10808440, 10894500, 10975230, 10982400, 10976900, 10972430, 10974560, 10995180, 11006090, 11017100, 11022500, 11022500, 11020860, 11014380, 11039400, 11052300, 11061950, 11066010, 11064370, 11051610, 11072980, 11101540, 11110390, 11111350, 11113760, 11085550, 11139470, 11161580, 11143130, 11140310, 11146340, 11181860, 11184290, 11199560, 11179960, 11178600, 11214520, 11211950, 11185550, 11242880,  11229530},
				{10000000, 10053260, 10073960, 10048760, 9999080, 10129780, 10134420, 10131460, 9972400, 10089020, 10123480, 10153280, 10174520, 10168870, 10068600, 9776330, 9041220, 9383020, 9733930, 9785680, 9596280, 9711620, 9369330, 8982480, 8902730, 9085480, 8323760, 8910470, 8758470, 8892320, 8835890, 8393040, 8466340, 7954220, 8858750, 8635500, 8748890, 8699830, 8662680, 8988960, 9006640, 8194240, 7992960, 7968440, 7983930, 8079910, 8575770, 8578120, 8828680, 8870770, 9112350, 9008990, 9066920, 9043120, 9047600, 8972280, 8593380, 8541500, 8486220, 8486620, 8538140, 8282220, 7670440, 7754950, 8319740, 8486740, 8447470, 8198650, 8621720, 8708840, 9149930, 9062930, 9135720, 9021870, 9364200, 9231480, 9381760, 9085110, 8970850, 9196330, 9351270, 8769470, 9325310, 9402410, 9500690, 9399570, 9720180, 9640540, 9571900, 9432600, 9472080, 9753640, 9629100, 9648620, 9517940, 9639440, 9610010, 9648080, 9281760, 8444140, 8837670, 8616520, 8527750, 8358890, 8708370, 8461200, 8363080, 8262080, 8204680, 7781100, 7363950, 7795640, 7684320, 8282420, 8443320, 7714250, 7535990, 8117510, 8116030, 8304080, 8384930, 8054180, 7446970, 7673810, 7506060, 7641310, 7932250, 7956530, 8127250, 9296610, 9527200, 9509400, 9454590, 9496930, 9754320, 9862790, 9647420, 9948670, 9986740, 9852010, 10056370, 10109930},
				{10000000, 9941040, 9920450, 9974900, 10063790, 9881290, 9869850, 9880220, 10171340, 10095280, 10053520, 10036820, 9979180, 10031530, 10205350, 10355020, 10268030, 10236880, 10075800, 10132790, 10306160, 10254040, 10481940, 10650840, 10669800, 10672810, 10832940, 10790040, 10851780, 10860930, 10881300, 10983340, 10991290, 11065910, 10955130, 11019530, 11001590, 11020510, 11076460, 11013630, 11033700, 11208150, 11221170, 11242340, 11262060, 11270840, 11217080, 11216080, 11172940, 11172020, 11130810, 11169040, 11163920, 11168720, 11168400, 11200080, 11297740, 11311190, 11327080, 11327680, 11321720, 11353760, 11403970, 11407590, 11382230, 11361080, 11368880, 11406430, 11354030, 11341090, 11244730, 11267680, 11247970, 11289100, 11203000, 11249600, 11208800, 11309500, 11349190, 11287740, 11243680, 11417200, 11292990, 11267340, 11234930, 11274030, 11154100, 11205020, 11235140, 11299090, 11287690, 11180160, 11236680, 11235890, 11288800, 11237100, 11250410, 11235120, 11379570, 11583310, 11544410, 11587910, 11601960, 11625750, 11585850, 11622900, 11635390, 11652940, 11656260, 11676970, 11688990, 11664970, 11679410, 11612660, 11585120, 11709010, 11747890, 11699240, 11699290, 11673190, 11672050, 11728510, 11798330, 11787250, 11795970, 11793720, 11771400, 11771590, 11753830, 11518990, 11436110, 11454510, 11479830, 11461950, 11352830, 11302320, 11414460, 11242160, 11245310, 11318210, 11213910, 11182560},
				{10000000, 10077590, 9934420, 10011650, 9955220, 9797670, 9657220, 9839460, 9892710, 9843060, 9793410, 9835210, 9819050, 9810890, 9683530, 9644510, 9678340, 9851990, 9879830, 9844030, 9864880, 9802970, 10018280, 10031980, 10030550, 10012870, 10019890, 10024960, 10098140, 10175340, 10184030, 10193270, 10129910, 10010990, 10130670, 9951320, 9902370, 10010030, 10011990, 10056110, 10067680, 9957280, 9945240, 9943000, 9924660, 9956760, 10013470, 9927520, 9923620, 9831410, 9879410, 9892050, 9814290, 9800690, 9807730, 9814770, 9764500, 9548920, 9088670, 9408920, 9430760, 9356000, 9443400, 9627200, 9757820, 10133170, 10067230, 9962280, 9815610, 9770030, 9797750, 9950050, 9977890, 9889770, 10029960, 10084360, 10053460, 10173860, 10171620, 10257690, 10351370, 10331450, 10315250, 10317530, 10338410, 10372900, 10422250, 10479800, 10455410, 10434620, 10349960, 10436860, 10540330, 10477980, 10447740, 10428340, 10321020, 10359900, 10342980, 10290430, 10298100, 10275220, 10340090, 10341260, 10254830, 10167330, 10192390, 10251050, 10145200, 10193800, 10174510, 10241710, 10236670, 10310030, 10263690, 10323510, 10132550, 10103750, 10108390, 10105030, 10194030, 10215630, 10201980, 10213980, 10240830, 10235430, 10267390, 10381260, 10495240, 10442690, 10455780, 10416860, 10282620, 10299280, 10159120, 10098320, 10094160, 10139600, 10074640, 10046070, 10145350, 10319950},
				{10000000, 9986720, 10032060, 10020320, 10030180, 10047580, 10047580, 10035040, 10026530, 10036370, 10046510, 10045960, 10048420, 10049380, 10065340, 10071720, 10069750, 10056150, 10053110, 10061450, 10057190, 10073750, 10034270, 10029970, 10032370, 10039020, 10036420, 10034070, 10007900, 9968350, 9963660, 9957570, 9997330, 10065960, 10020810, 10088110, 10110150, 10090070, 10089590, 10080640, 10084010, 10117410, 10121130, 10121650, 10126570, 10122460, 10113830, 10140030, 10140720, 10159330, 10153230, 10151590, 10161350, 10160850, 10161910, 10161270, 10168550, 10174700, 10184680, 10167730, 10165120, 10176310, 10169480, 10132400, 10098880, 9925030, 9977830, 10048550, 10124360, 10147840, 10138120, 10086720, 10075740, 10126530, 10061300, 10031420, 10055070, 9982520, 9988900, 9921580, 9833070, 9854260, 9862060, 9868300, 9845940, 9809280, 9749800, 9655950, 9708900, 9743850, 9880790, 9777710, 9621740, 9749040, 9799740, 9830940, 9976650, 9937410, 9959450, 10015550, 10011110, 10031270, 9972230, 9970190, 10075320, 10141320, 10123500, 10076530, 10160480, 10135850, 10156550, 10106050, 10111350, 10060480, 10096560, 10050690, 10212330, 10226830, 10228450, 10230520, 10179940, 10167160, 10175530, 10164080, 10152880, 10156680, 10135980, 10054740, 9942730, 10003180, 9991220, 10038410, 10170690, 10162040, 10261910, 10288910, 10298180, 10272800, 10308690, 10323730, 10286520, 10192620}
			};

			m_margin2 = new double[6, 142]
			{
				{0, 700, 700, 800, 1000, 900, 900, 900, 1200, 1200, 1100, 1000, 1000, 1200, 1500, 1900, 2300, 2100, 1800, 2000, 2200, 2200, 2400, 2700, 2700, 2800, 3100, 2700, 2500, 2400, 2400, 2700, 2800, 3100, 2800, 2800, 2900, 2900, 3000, 3000, 3000, 3400, 3400, 3500, 3500, 3300, 3200, 3200, 3100, 3000, 2900, 2900, 2800, 2800, 2700, 2800, 2900, 2900, 2800, 2800, 2800, 2900, 3100, 3000, 2500, 2400, 2400, 2400, 2300, 2300, 2200, 2200, 2200, 2300, 2200, 2100, 1700, 1600, 1700, 1700, 1800, 2000, 1800, 1800, 1800, 1600, 1600, 1600, 1500, 1500, 1500, 1300, 1200, 1200, 1200, 1000, 1000, 1100, 1200, 1800, 1900, 1900, 1900, 1900, 1800, 1800, 1900, 2100, 2100, 2200, 2200, 2200, 2100, 2100, 2100, 2100, 2200, 1900, 1900, 1900, 1900, 1800, 2100, 2100, 2100, 2100, 2100, 1900, 1600, 1600, 1400, 1400, 1400, 1400, 1100, 800, 900, 700, 700, 700, 500, 400},
				{0, 1300, 1500, 1400, 1300, 1300, 1300, 1200, 1100, 1200, 1100, 1200, 1200, 1200, 1400, 1400, 1500, 1400, 1400, 1500, 1600, 1700, 1700, 1700, 1700, 1800, 1800, 1900, 1900, 1900, 1900, 1700, 1600, 1400, 1600, 1500, 1400, 1500, 1300, 1700, 1700, 1700, 1700, 1900, 1900, 1900, 1700, 1700, 1800, 1900, 1700, 1800, 1700, 1700, 1700, 1900, 1800, 2100, 1900, 1800, 1900, 2000, 2100, 2100, 2100, 1700, 1700, 1600, 1400, 1400, 1400, 1200, 1200, 1200, 1100, 1100, 700, 600, 600, 600, 500, 600, 700, 700, 700, 700, 600, 700, 700, 800, 800, 700, 700, 700, 800, 1000, 1000, 1000, 1000, 700, 700, 700, 600, 300, 200, 300, 300, 300, 200, 100, 100, 0, 0, 100, 200, 200, 0, 100, 100, 100, 400, 200, 100, 100, 100, 100, 400, 200, 0, 300, 300, 300, 200, 300, 200, 400, 400, 200, 300, 500, 300, 300},
				{0, 600, 500, 500, 700, 400, 400, 400, 900, 700, 600, 400, 400, 500, 800, 1300, 2200, 2100, 1700, 1600, 2000, 1900, 2100, 2500, 2500, 2500, 2900, 2600, 2900, 2700, 2700, 3000, 3000, 3300, 2800, 2900, 2900, 2900, 3000, 2800, 2800, 3200, 3200, 3300, 3400, 3300, 3100, 3100, 3000, 2900, 2800, 2900, 2800, 2800, 2800, 2800, 3000, 3200, 3200, 3200, 3200, 3300, 3700, 3600, 3400, 3300, 3300, 3300, 3200, 3200, 2900, 2900, 2900, 3000, 2800, 2800, 2800, 2900, 2900, 2800, 2900, 3000, 2900, 2800, 2800, 2800, 2600, 2600, 2600, 2800, 2800, 2600, 2600, 2700, 2700, 2700, 2700, 2700, 2800, 3300, 3300, 3300, 3300, 3400, 3300, 3300, 3400, 3500, 3500, 3700, 4000, 3900, 3800, 3600, 3500, 3800, 3900, 3700, 3700, 3500, 3500, 3600, 3900, 3900, 4000, 3900, 3900, 3800, 3700, 3100, 2900, 2900, 2900, 2900, 2800, 2700, 2800, 2700, 2700, 2700, 2600, 2600},
				{0, 900, 1100, 1000, 900, 1100, 1100, 1200, 700, 900, 900, 1100, 1100, 1000, 700, 200, 800, 1000, 1200, 1300, 1200, 1300, 1000, 600, 600, 600, 200, 500, 500, 700, 700, 400, 500, 200, 700, 600, 600, 700, 500, 700, 700, 200, 200, 200, 200, 300, 500, 500, 600, 800, 900, 800, 800, 800, 800, 800, 600, 500, 400, 400, 400, 400, 100, 200, 400, 500, 500, 500, 500, 600, 900, 900, 900, 800, 1000, 1000, 1000, 900, 900, 1000, 900, 700, 900, 900, 1000, 1000, 1200, 1200, 1200, 1000, 1000, 1200, 1200, 1100, 1100, 1100, 1100, 1100, 1000, 400, 500, 500, 500, 400, 500, 500, 400, 200, 200, 100, 200, 300, 400, 600, 600, 400, 300, 500, 500, 600, 600, 600, 200, 200, 200, 300, 300, 400, 400, 1100, 1200, 1200, 1200, 1200, 1300, 1400, 1400, 1500, 1500, 1500, 1500, 1500},
				{0, 1100, 1300, 1200, 1300, 1500, 1600, 1600, 1500, 1500, 1500, 1600, 1600, 1600, 1600, 1700, 1700, 1600, 1600, 1500, 1500, 1600, 1400, 1300, 1300, 1300, 1300, 1300, 1200, 1100, 1100, 1100, 1100, 1200, 1200, 1400, 1500, 1400, 1400, 1300, 1300, 1400, 1400, 1400, 1400, 1500, 1400, 1500, 1500, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1700, 1900, 2300, 2100, 2100, 2100, 2000, 2000, 1800, 1400, 1400, 1500, 1700, 1800, 1800, 1600, 1600, 1700, 1600, 1500, 1500, 1400, 1400, 1300, 1200, 1200, 1200, 1200, 1200, 1100, 1000, 900, 900, 900, 1100, 1000, 800, 900, 900, 1000, 1200, 1200, 1200, 1300, 1300, 1300, 1300, 1300, 1400, 1400, 1400, 1400, 1500, 1500, 1400, 1400, 1400, 1400, 1400, 1300, 1600, 1600, 1600, 1600, 1500, 1500, 1500, 1500, 1500, 1500, 1400, 1300, 1200, 1100, 1100, 1200, 1400, 1400, 1600, 1600, 1600, 1600, 1600, 1700, 1700, 1500},
				{0, 400, 200, 200, 200, 0, 0, 200, 300, 300, 300, 200, 200, 200, 200, 100, 100, 200, 200, 300, 300, 200, 400, 500, 500, 500, 500, 500, 600, 700, 700, 700, 700, 600, 500, 400, 300, 400, 400, 500, 400, 400, 400, 400, 400, 300, 400, 300, 300, 200, 200, 200, 200, 200, 200, 200, 100, 0, 0, 300, 300, 300, 400, 400, 600, 1000, 1000, 900, 700, 600, 600, 900, 900, 800, 900, 900, 1000, 1100, 1100, 1100, 1300, 1300, 1300, 1300, 1300, 1300, 1400, 1500, 1500, 1500, 1300, 1400, 1600, 1500, 1500, 1500, 1200, 1200, 1300, 1200, 1200, 1200, 1200, 1200, 1100, 1100, 1100, 1100, 1000, 900, 1000, 1000, 1000, 1100, 1100, 1100, 800, 900, 900, 900, 900, 900, 900, 1000, 1000, 1000, 1000, 1200, 1300, 1300, 1300, 1300, 1100, 1000, 900, 900, 900, 900, 800, 800, 800, 1000},
			};

			//"EUR/USD Buy"
			//"EUR/USD Sell"
			//"EUR/JPY Buy"
			//"EUR/JPY Sell"
			//"USD/JPY Buy"
			//"USD/JPY Sell"

			m_balance2 = new Vector[3];
			m_balance2[0] = new Vector(new double[] { 1, 0, 1, 0, 0, 0 });
			m_balance2[1] = new Vector(new double[] { 0, 1, 0, 0, 1, 0 });
			m_balance2[2] = new Vector(new double[] { 0, 0, 0, 1, 0, 1 });
		}
		[TestMethod]
		public void ValidateCalculateLinearByEquity()
		{
			Portfolio portfolio = Portfolio.CalculateLinear(m_equity, 0.95, 2000000);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 44361.678434564674, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.08395699716278, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 0.8343726990339021, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 3.8794446786429853, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 28.907356443934027, 0.001));
			
		}
		[TestMethod]
		public void ValidateCalculateLinearDiscreteByEquity()
		{
			Portfolio portfolio = Portfolio.CalculateLinear(m_equity, 0.95, 2000000, 1);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 44355.3, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.0904, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 1.00003, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 3.82186, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 28.9476, 0.001));

		}
		[TestMethod]
		public void ValidateCalculateLinearFastDiscreteByEquity()
		{
			Portfolio portfolio = Portfolio.CalculateLinearFast(m_equity, 0.95, 1000000, 1);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 22100.7, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.2474, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 0, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 2.07571, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 14.2902, 0.001));

		}
		[TestMethod]
		public void ValidateCalculateLinearByEquityAndMargin()
		{
			Portfolio portfolio = Portfolio.CalculateLinear(m_equity, m_margin, 0.95, 3000000, 40000);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 66499.84788772937, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.11288512405088, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 0.7282109294652774, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 6.031212361462828, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 43.14954986809901, 0.001));
		}
		[TestMethod]
		public void ValidateCalculateLinearFastDiscreteByEquityAndMargin()
		{
			Portfolio portfolio = Portfolio.CalculateLinearFast(m_equity, m_margin, 10000000, 0.95, 3000000, 175, 0.5);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 66499.84788772937, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.11288512405088, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 0.7282109294652774, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 6.031212361462828, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 43.14954986809901, 0.001));
		}
		[TestMethod]
		public void ValidateCalculateLinearFastDiscreteByEquityAndMargin2()
		{
			Portfolio portfolio = Portfolio.CalculateLinearFast(m_equity, m_margin, 10000000, 0.95, 3000000, 175, 1);

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Profit, 66302.18930833213, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.When, 45.247374827270384, 0.001));

			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[0], 0, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[1], 6.227138204537038, 0.001));
			Assert.IsTrue(NumericalMethods.IsApproximatelyEqual(portfolio.Coefficients[2], 42.8705934207335, 0.001));
		}
		[TestMethod]
		public void ValidateCalculatePortfolioByEquityMarginBalance()
		{
			PortfolioInput input = new PortfolioInput();
			input.Equity = m_equity2;
			input.Margin = m_margin2;
			input.InitialDeposit = 10000000;
			input.MarginLevelThreshold = 1750;
			input.MaximumLoss = 3000000;
			input.Reliability = 0.95;
			input.MinimumCoefficientValue = 1;
			Portfolio portfolio = Portfolio.CalculateLinearMarginBalance(input, m_balance2);
		}
	}
}
